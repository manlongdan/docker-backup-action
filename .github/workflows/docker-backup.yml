# 工作流文件的路径: .github/workflows/docker-backup.yml

name: Docker 镜像备份

on:
  # 允许您从 Actions 页面手动触发此工作流
  workflow_dispatch:

  # 按计划执行 (schedule)
  # 这里的设置等同于 PDF 中的 crontab 定时任务 [cite: 279, 280]
  # 示例：每8小时的第15分钟运行一次
  schedule:
    - cron: '15 */8 * * *'

jobs:
  backup:
    # 指定运行环境为最新的 Ubuntu 系统
    runs-on: ubuntu-latest
    steps:
      # 第一步：拉取仓库代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 第二步：设置 QEMU，用于多平台镜像构建
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # 第三步：设置 Docker Buildx，脚本依赖此插件 [cite: 20]
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 第四步：登录到 Docker Hub
      # 这里使用了我们上一步设置的 GitHub Secrets
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}

      # 第五步：运行备份脚本
      - name: Run Backup Script
        env:
          # 将机密信息作为环境变量传递给脚本 [cite: 15]
          # 这就替代了本地 .env 文件的功能
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_PASS: ${{ secrets.DOCKER_PASS }}
        run: |
          # 赋予脚本执行权限 [cite: 256]
          sudo chmod +x docker-backup.sh
          
          # 执行脚本，并把配置文件路径作为参数传入
          ./docker-backup.sh ./backup_repos.conf

      # 第六步：退出 Docker Hub 登录
      - name: Logout from Docker Hub
        if: always() # 确保无论成功失败都执行退出操作
        run: docker logout
